
return {
    /**
     * @namespace Fingerprint
     * @memberof quixot
     */
    Fingerprint: {
        /**
         *
         * @method data
         * @memberof quixot.Fingerprint
         * @returns {Object} the full scanned properties
         */
        data: fingerprint_data,
        /**
         *  @method identifier
         *  @memberof quixot.Fingerprint
         *  @returns {String} The unique fingerprint identifier
         */
        identifier: fingerprint_identifier,

        /**
         * @memberof quixot.Fingerprint
         * @method text
         * @returns {String} the text to compose the identifier
         */
        text: fingerprint_text,
        /**
         * @method numbers
         * @memberof quixot.Fingerprint
         * @returns {String} the numbers from text()
         */
        numbers: fingerprint_numbers
    },

    /**
     * @namespace Event
     * @memberof quixot
     */
    Event: {
        /**
         * the name of the event witch is triggered any time an "Event.appoint" is registered
         * @property {String}
         * @memberof quixot.Event
         */
        APPOINTMENT_DONE: 'quixot_event_appointment_done',
        /**
         * @method dispatch
         * @memberof quixot.Event
         * @param name {String} required
         * @returns {Number} -1 if error occurs, 0 if no event is registered, > 0 as length of
         *                   registered events for specified name
         */
        dispatch: event_dispatch,
        /**
         * check if a provided listener exist using declared or autogenerated "uidName" from "addListener"
         * @method hasListener
         * @memberof quixot.Event
         * @param eventName {String} required
         * @param uidName {String} optional, if provided when listener was added
         * @returns {Boolean} true if the listener exist
         */
        hasListener: event_hasEventListener,

        /**
         * register an event listener
         * @method addListener
         * @memberof quixot.Event
         * @param eventName {String} required
         * @param callback {Function} required
         * @param uidName {String} an optional unique identifier for the method,
         * to be used when removing the event handler
         * @example
         * quixot.addEventListener('whenMyJobIsCompleted', function(){
         *      console.log('finished');
         * }, 'myUniqeId');
         * @returns {Object} The current registered event listeners
         */
        addListener: event_addEventListener,

        /**
         * remove a registered event listener
         * @method removeListener
         * @memberof quixot.Event
         * @param eventName {String} name of the event to be removed
         * @param uidName {String} optional. If not provided default function to string will be used
         * @returns {boolean} true if the listener is removed, false if listener does not exist anymore
         */
        removeListener: event_removeEventListener,
        /**
         * retrieve all registered events and dispacthers
         * @method getAll
         * @memberof quixot.Event
         * @returns {Object} containing 2 properties: events and dispatchers
         */
        getAll: getAllEvents,

        /**
         * appoint a method. If the environment is browser the appointment will be done via "event_appoint". <br />
         * For NodeJS, method "setImmediate" will be used, so the "id" property of the result will be an object.
         * @method appoint
         * @memberof quixot.Event
         * @param callback {Function} required
         * @param delay  {Number} optional, used only if browser has no support for "animationFrame" and a setTimeout will be used.
         * <br /> If not provided, a default value of 30 will be used.
         * @returns {Object} containing 2 properties: "type" => a string describing the used method for appointment (mozRequestAnimationFrame|setImmediate|setTimeout|nothing_found)
         * and an "id" => the data return by the method. <br /> This can be used as parameter for  "dropAppoint".
         */
        appoint: event_appoint,


        /**
         * cancel an appoint. Usage of this method should be avoided, since further changes on "appoint" method might
         * return undroppable callbacks.
         * @method dropAppoint
         * @memberof quixot.Event
         * @param id {Object|Number} required
         * @returns {Boolean} false if "id" is not provided or is invalid
         * @example
         * var result = quixot.Event.appoint(function(){console.log('hi')}, 0);
         * quixot.Event.dropAppoint(result.id); //and nothing will happen
         */
        dropAppoint: removeAnimationFrame
    },
    /**
     * @namespace URL
     * @memberof quixot
     */
    URL: {
        /**
         * retrieve the parameters from a given url
         * @method getParams
         * @memberof quixot.URL
         * @param url {String}
         * @returns {Object}
         * @example
         * quixot.URL.getParams("test.html?one=1&two=2")
         * //returns Object {one: 1, two: 2}
         * // same as:
         * quixot.URL.decode("test.html?one=1&two=2").params
         */
        getParams: url_get_params,
        /**
         * Extract the domain from an url.
         * @method getDomainFromUrl
         * @memberof quixot.URL
         * @param url {String}
         * @returns {String} For any invalid input, default return value is "localhost"
         * @example
         *      quixot.URL.getDomainFromUrl('https://www.mydomain.com/page?args=more');
         */
        getDomainFromUrl: url_getDomainFromUrl,
        /**
         * returns the current domain
         * @method currentDomain
         * @memberof quixot.URL
         * @returns {String} for NodeJS environment default value will be "localhost"
         * @example
         *      quixot.URL.currentDomain(); //produces the same result as:
         *      quixot.URL.getDomainFromUrl(document.URL)
         */
        currentDomain: url_currentDomain,
        /**
         * converts an object to a url query model. Inherited objects are converted into json string. <br />
         * Lists are converted into csv format
         * @method querify
         * @memberof quixot.URL
         * @param object {Object} object in json format
         * @returns {String}
         * @example
         * quixot.URL.querify({a:1, b:[1, 2, 3], g:"text", c:{d:2, f:"some string"}});
         * //output: 'a=1&b=[1,2,3]&g=text&c={"d":2,"f":"some string"}'
         */
        querify: url_querify,
        /**
         * @method decode
         * @memberof quixot.URL
         * @param url {String}
         * @returns {Object}
         * @example
         * quixot.URL.decode('http://mydomain/page1/page2/finalPage?arg0=1,2,3&arg1=[1,2,3]');
         * //protocol => 'http'
         * //lastPage => 'finalPage'
         * //parts[2] =>mydomain
         * //params.arg0[0] => '1'
         * //params.arg1[0] => '[1'
         */
        decode: url_decode,
        /**
         * cross browser support for window.location.pathname.
         * For non browsers environment, empty string is returned
         * @method currentPath
         * @memberof quixot.URL
         * @returns {String} current path name, as defined by window.location.pathname.
         */
        currentPath: url_current_path,
        /**
         * @method currentSearch
         * @memberof quixot.URL
         * @returns {String} current search name, as defined by window.location.search
         */
        currentSearch: url_current_search,
        /**
         *
         * @method currentParams
         * @memberof quixot.URL
         * @returns {Object} current url params
         * @example
         * quixot.URL.currentParams();  retrieve the same data as:
         * quixot.URL.decode(document.URL).params;
         */
        currentParams: url_current_params
    },

    /**
     * @namespace Logger
     * @memberof quixot
     * @example
     *   var myLogger = quixot.Logger.getInstance('TestLogger');
     *   myLogger.log('info', 'some message');
     *   myLogger.error('error occured');     //produces the same as
     *   myLogger.log('error', 'error occured');
     *   myLogger.info('info data');          //produces the same as
     *   myLogger.log('info', 'info data');
     *   quixot.Logger.warn('warning');        //produces the same as
     *   quixot.Logger.getInstance('quixot').log('warn', '111111');
     *   quixot.Logger.trace('bla-bla-bla');   ///produces the same as
     *   quixot.Logger.getInstance('quixot').log('warn', '111111');
     */
    Logger : {
            /**
             * default console appender function
             * @property {Function}
             * @memberof quixot.Logger
             */
             CONSOLE_APPENDER: logger_default_console_appender,

            /**
             * default html appender function
             * @property {Function}
             * @memberof quixot.Logger
             */
             DOM_APPENDER: logger_default_dom_appender,
            /**
             * info logging using default instance
             * @method info
             * @memberof quixot.Logger
             * @param message {Object} required
             */
            info: function (message) {
                logger_defaultInstance.log('info', message);
            },
            /**
             * define default configuration for all newly created logging instances
             * @method setDefaultConfig
             * @memberof quixot.Logger
             * @param config {Object} optional keys
             * @example
             * //built in definition:
             * quixot.Logger.setDefaultConfig({
             *      appenders: // a list of callbacks
             *      [ function(name, level, payload){
             *          //=> where payload has the following structure:
             *          {
             *              timestamp: {Date},
             *              message: {Object|String|Number} -> as called by client,
             *              stack: {Array} -> stack data
             *              caller: {Function} -> only if exists
             *
             *          }
             *      } ],
             *      logStack: true
             * })
             */
            setDefaultConfig: function(object) {
                for(var i in object) {
                    logger_defaultConfiguration[i] = object[i];
                }
            },
            /**
             * @method getDefaultConfig
             * @memberof quixot.Logger
             * @returns {Object} logger default configuration
             */
            getDefaultConfig: function () {
                return logger_defaultConfiguration;
            },
            /**
             * trace logging using default instance
             * @method trace
             * @memberof quixot.Logger
             * @param message {Object}
             */
            trace: function (message) {
                logger_defaultInstance.trace(message);
            },
            /**
             * error logging using default instance
             * @method error
             * @memberof quixot.Logger
             * @param message {Object}
             */
            error: function(message){
                logger_defaultInstance.log('error', message);
            },
            /**
             * warn logging using default instance
             * @method warn
             * @memberof quixot.Logger
             * @param message {Object}
             */
            warn: function (message) {
                logger_defaultInstance.warn(message);
            },
            /**
             * @method getLogs
             * @memberof quixot.Logger
             * @returns {Object} default instance logs
             */
            getLogs: function () {
                return logger_defaultInstance.getLogs();
            },
            /**
             * @method getAll
             * @memberof quixot.Logger
             * @returns {Object} the logger_container with all logging instances
             */
            getAll: logger_getContainer,
            /**
             * returns a new logger instance
             * @method getInstance
             * @memberof quixot.Logger
             * @param instancename {String} required
             * @param config {Object} optional logger configuration
             * @returns {Object} the logger_container with all the logger instances
             * @example
             * var myLogger = quixot.Logger.getInstance('TestLogger');
             * myLogger.setConfig(
             *      {
             *          appenders: [
             *                    function(name, level, data){
             *                          console.log(arguments);
             *                  }
             *          ]
             *    }
             * )
             */
            getInstance: logger_getInstance,
            /**
             * set the value for accessing logger configuration from URL. This feature is avaiable only for
             * browser environments. <br />
             * If is set to ``` false```, no configuration can
             * be changed by using URL parameters. The url query opbject can contain only 2 properties:
             * "consoleAppender", to use quixot default console appender as defined by quixot.Logger.CONSOLE_APPENDER
             * and "fileAppender",  to use quixot default dom appender as defined by quixot.Logger.DOM_APPENDER.
             * @method setURLAccessKey
             * @memberof quixot.Logger
             * @param name {String} required
             * @example
             * //this will allow you to put the following query param into url:
             * //http://localhost/mypage?customKey={"ALL":{"consoleAppender":true}}
             * quixot.Logger.setURLAccessKey('customKey');
             */
            setURLAccessKey: logger_setoptkey
    },
    /**
     * The following namespace has no effect in non-browser environments, although is unit testable
     * @namespace Cookie
     * @memberof quixot
     */
    Cookie: {
        /**
         * retrieve a cookie with provided name.
         * @method getc
         * @memberof quixot.Cookie
         * @param name {String}
         * @returns {String} if the cookie does not exist, result is null
         */
        getc: getCookie,

        /**
         * create a new cookie
         * @method setc
         * @memberof quixot.Cookie
         * @param name {String} required name of the cookie
         * @param value {String} required value of the cookie
         * @param expires {Date|Number} expire date.
         * This parameter can also be provided via "Time" namespace
         * @param path {String} optional
         * @param domain {String} optional
         * @param secure {Boolean} optional
         * @returns {String} the composed cookie string
         * @example
         *  quixot.Cookie.setc(
         *      'test-cookie', 'test-cookie-value',
         *      quixot.Time.interval(1, 'month'),
         *      'path', 'domain', true);
         *  //based on client timestamp, might return
         *  //"test-cookie=test-cookie-value; expires=Tue, 03 Jan 2017 10:41:31 GMT; path=path; domain=domain; secure"
         */
        setc: cookie_setCookie,

        /**
         * delete a cookie
         * @method drop
         * @memberof quixot.Cookie
         * @param name {String} required
         * @param path {String} optional
         * @param domain {String} optional
         * @returns {String} empty string
         */
        drop: deleteCookie
    },

    /**
     * @namespace Util
     * @memberof quixot
     */
    Util: {
        /**
         * encode any type of javascript data type (specially numbers) to string
         * @method atos
         * @memberof quixot.Util
         * @param data {Number|String|Date|Object|Array|Function} required
         * @param mapping {String} optional a string whose characters will be used for encoding
         * @param zval {Number} the value for 0, used for encoding duplicated numeric characters
         * @returns {String}
         * @example
         *  quixot.atos(123456789); // "mdefghij"
         *  quixot.atos(000000); // "a"
         *  quixot.atos('000000'); // "abcdef"
         *  quixot.atos('000000', '!@#$%^&*()+='); // "!@#$%^"
         */
        atos: util_atos,

        /**
         * converts any type of data into a string containing only numeric characters
         * @method aton
         * @memberOf quixot.Util
         * @param input {String|Number|Array|Object|Date}
         * @param separator {String} a separator for numbers
         * @returns {String} a string containing only numeric characters
         * @example
         *  quixot.Util.aton('\""', '__'); // "54__54"
         *  quixot.Util.aton(1234+'bcd'); //"1234234"
         */
        aton: util_aton,
        /**
         * generates an unique id that begins with a letter ([A-Za-z])
         * and may be followed by any number of letters, digits ([0-9])
         * @method makeDomId
         * @memberOf quixot.Util
         * @param prefix {String} optional, a prefix to be appended at the begging of the string
         * @returns {String}
         */
        makeDomId: util_dom_id,
        /**
         * generates a random string
         * @method randStr
         * @memberOf quixot.Util
         * @param mapping {String}  a string whose characters will be used for encoding. <br />
         * Same usage as for "atos" method
         * @returns {String} a random string
         */
        randStr: util_random_string,
        stringToHex: util_stringToHex,
        rgbToHex: util_rgbToHex,
        rgbToHexShift: util_rgbToHexShift,
        serialize: util_serialize,
        simplify: util_simplify,
        isPrimitive: util_isPrimitive,
        isFunction: util_isFunction,
        util_objKeys: util_objKeys,
        isArray: util_isArray,
        encodeObject: util_encodeObject,
        stringify: util_stringify,
        /**
         * increments an unique number (old value is cached)
         * @memberof quixot.Util
         * @param asfloat {Boolean} optional
         * @returns {Number} positive integer
         * @example
         * quixot.Util.incr(true); // 30.07000000000001
         * quixot.Util.incr();    // 31
         */
        incr: util_incr,
        /**
         * if no parameters are provided a currentTimestamp value will be returned. id method is called twice
         * in less than a milisecond, a quixot.Util.incr() value will be returned to make sure return values
         * are avoided
         * @memberof quixot.Util
         * @param min limit range if "max" is not provided
         * @param max limit range
         * @returns {Number} float
         * @example
         * quixot.Util.randNr(3); // will generate numbers betwen 0 and 3, like 0.6573690931544247
         * quixot.Util.randNr(2, 4); // will generate numbers betwen 2 and 4, like 2.3124963172024833
         * quixot.Util.randNr(-5); // will generate numbers betwen -5 and 0, like -4.3664502906423195
         */
        randNr: util_randNr,
        /**
         * same usage as "randNr", only it returns an integer
         * @memberof quixot.Util
         * @param min
         * @param max
         * @returns {Number} float
         */
        randInt: util_randInt
    },
    /**
     * supports browser && nodejs
     * @module Cache
     * @namespace Cache
     * @memberof quixot
     */
    Cache: {
            /**
             * caching instances factory
             * @method getInstance
             * @memberof quixot.Cache
             * @param instanceName{String}
             * @param lifetime {Number}
             * @returns {Object} a new or an existing caching instance
             */
            getInstance: cache_getInstance,

            /**
             * put item inside default cache instance
             * @method put
             * @memberof quixot.Cache
             * @param key {String}
             * @param value {String|Number|Array|Object}
             * @returns {Boolean} true if cache is populated
             */
            put: function (key, value) {
                return domainCacheInstance.put(key, value)
            },

            remove: function (key) {
                domainCacheInstance.remove(key);
            },

            getData: function () {
                return  domainCacheInstance.getData()
            },

            getSafe: function (propname, defaultvalue) {
                return  domainCacheInstance.getSafe(propname, defaultvalue)
            }
    },
    /**
     * contains data related to enviroment:
     * @namespace Env
     * @memberof quixot
     * @example
     * quixot.Env.jsEngine.isBrowser; //true if script is running in browser
     * quixot.Env.jsEngine.isNodeJs;  //true if script is running in node js
     * quixot.Env.javaEnabled;        //true if java is enabled in browser,
     *                                             // or if a path to JAVA_HOME exist is operating system enviroment
     * quixot.Env.tempDir             //path to operating system temporary directory
     * quixot.Env.homeDir             //path to operating system user home directory
     * quixot.Env.javaPath            //path to java binary (java.exe || java)
     */
    Env: envData,

    /**
     * system information (browser|nodejs)
     * @namespace System
     * @memberof quixot
     */
    System: {

        battery: system_battery,
        screen: screen_info,
        performance: system_getPerformance,

        /**
         * operating system info
         * @memberof quixot.System
         * @namespace os
         * @example
         * quixot.System.os.name; // returns the operating system generic name
                                  // nodejs support is provided via os.type if exists otherwise via
                                  // os.platform. Result may be "Windows|Mac|Linux"
           quixot.System.version  // returns operatinng system version
                                  // result may vary based on scanned features
                                  // browsers will return data based on user agent, nodejs
                                  // or other engines may provide content via 'os.release'
         */
        os: os_info
    },


    /**
     *  browser information< br/>
     *  @namespace Browser
     *  @memberof quixot
     *  @example
     *  quixot.Browser.name; (Chrome|Firefox|Explorer|Opera|iCab|rekonq|Midori|Arora|Stainless|Epiphany|K-Meleon|Camino|Maxthon|SeaMonkey|Edge|OmniWeb|Apple|KDE|Netscape|MSIE|Gecko|Mozilla|Tizen)
     *  quixot.Browser.version;
     */
    Browser: {
        name: browserName,
        version: browserVersion,
        searchedData: browser_searched_data,
        is: getIs(),
        has: getHases(),
        get: getGeetters()
    },

    /**
     * the unit testing namespace.
     * @namespace Sancho
     * @memberof quixot
     */
    Sancho : {
        /**
         * For NodeJS environment, built-in 'assert' library will be used.
         * @method equals
         * @memberof quixot.Sancho
         * @returns {Boolean} true if test is passed
         * @example
         * quixot.Sancho.equals(1, 1);
         */
         equals: sancho_equals,
        
         deepEquals: sancho_deepEquals,
         hasData: sancho_hasData,
         hasProperty: sancho_hasProperty,

        /**
         * verify if a list contains no duplicates
         * @method noDuplicates
         * @memberof quixot.Sancho
         * @param list {Array}
         * @returns {Boolean}
         * @example
         * quixot.Sancho.noDuplicates([1, 8, 3, 4, 9, 7, 2 ])
         */
         noDuplicates: sancho_noDuplicates,
         donkey: sancho_monkey,
         setConfig: function (c) {
             testingCfg = c;
         },
         getConfig: function () {
             return testingCfg;
         }
    },

    Tween: Tween,
    Easing: Easing,

    /**
     * minimal graphic user interface components
     * designed to run inside any type of enviroment and provide if possible
     * native behaviour on visual components
     * @namespace Mingui
     * @memberof quixot
     */
    Mingui: {
        /**
         * for browsers the notify action will first try create a native html5 notification
         * if domain protocol is "http" or "https". <br /> Second second approach will
         * be to create a pop-up window. Please remember that second tryout will also
         * apply if user native notifications are blocked from settings.<br />
         * Finally, if the pop-up window is blocked, a simple html notification will
         * be added to current document, styled by default with operating system colors. <br />
         *
         * For nodejs enviroments
         * if java path is detected a spawned process wil start. (required java 1.8, this feature is still under developpement)
         * @method notify
         * @memberof quixot.Mingui
         * @param title {String}
         * @param text {String}
         * @param picture {String}
         * @param lifetime {Number}
         * @param success {Function}
         * @param failure {Function} although the method returns false due to known reasons, this callback is safe
         *                           to use. For example, native html5 notification require user approval. In this case
         *                           method will return false, but if user press "Allow" the "failure" callback
         *                           will never be called
         * @param onclick {Function} Attention!!! This callback may run without context in some implementations.
         * @param onclose {Function} Attention!!! This callback may run without context in some implementations.
         * @returns {Boolean|Object} false if notification fails to be displayed due to known reasons, an object with "remove()" method.
         */
        notify: cross_notify
    },

    Http: {
        request: http_request,
        doGet:http_get,
        doPost: http_post,
        doPostXForm: http_post_x_form
    },

    /**
     * Time utils
     * @namespace Time
     * @memberof quixot
     */
    Time: {
        /**
         * @method interval
         * @memberof quixot.Time
         * @param count {Number} required
         * @param type {String} required, one of (nano|second|minute|hour|day|month|year)
         * @returns {Number} the value in milliseconds of required parameters
         * @example
         * quixot.Time.interval(4, 'year'); // returns 126144000000
         */
        interval: time_interval,
        dateAdd: time_date_add,
        dateRoll: time_date_roll,
        dateToString: date_to_string,
        next: time_next_date
    },
    GOG: gog_root,

    /**
     * @namespace Dulcineea
     * @memberof quixot
     */
    Dulcineea: {
        /**
         * @namespace compiler
         * @memberof quixot.Dulcineea
         */
        compiler: {
            /**
             * executes a call for a JSON formatted object
             * @method execute
             * @memberof quixot.Dulcineea.compiler
             * @param caller {String}
             * @param jsonData {Object|JSON}
             * @returns {Object}
             * @example
             * quixot.Dulcineea.compiler.execute('a.b', {a:{b: 1}});
             * //returns "1"
             */
            execute: execute_js,

            /**
             * converts a string into a list of valid JSON callers
             * @method extract
             * @memberof quixot.Dulcineea.compiler
             * @param {String} input
             * @returns {Array}
             * @example
             * quixot.Dulcineea.compiler.extract('a.b.c'); //returns ['a', 'b', 'c']
             * quixot.Dulcineea.compiler.extract('a.b[0]c["data"]'); //returns ["a", "b", "0", "c", "'data'"]
             */
            extract: extract_callers
        },
        templateRender : template_replace
    },
    /**
     * require safe support: cached node js requirements <br />
     * TODO support for http://requirejs.org/
     * @memberof quixot
     */
    require: __require,
    packInfo: quixot_pack_info,
    debug: {
        atos_memodata: function () {
            return util_atos_memodata;
        },
        wGL: function () {
            return  webGL;
        }
    }


}

})();



if(typeof module !='undefined') {
  module.exports = quixot;
}